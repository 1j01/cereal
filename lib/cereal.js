// Generated by CoffeeScript 1.9.2
(function() {
  var Unserialisable, array, dejsonify, generateDecodeWork, generateEncodeWork, isPrimitive, jsonify, nu, object, prim, randomString, ref, undef, unserialisable, unserialisableReferences;

  isPrimitive = function(obj) {
    return obj !== Object(obj);
  };

  randomString = function(length) {
    return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1);
  };

  undef = 0;

  nu = 1;

  prim = 2;

  object = 3;

  array = 4;

  ref = 5;

  unserialisable = 9;

  unserialisableReferences = {};

  Unserialisable = (function() {
    var clientID, counter;

    clientID = randomString(30);

    counter = 0;

    Unserialisable.getID = function() {
      return clientID + "-" + (++counter);
    };

    function Unserialisable(id1) {
      this.id = id1;
    }

    Unserialisable.prototype.toString = function() {
      return "(unserialisable #" + this.id + ")";
    };

    return Unserialisable;

  })();

  generateEncodeWork = function(obj, target) {
    var i, len, name, names, results;
    names = Object.keys(obj);
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      target[name] = [];
      results.push([target[name], obj[name]]);
    }
    return results;
  };

  jsonify = function(obj) {
    var id, item, refIdx, root, seen, seenIdx, target, worklist;
    root = [];
    seen = [];
    seenIdx = 0;
    worklist = [[root, obj]];
    while (worklist.length > 0) {
      item = worklist.shift();
      target = item[0];
      obj = item[1];
      if (obj === void 0) {
        target[0] = undef;
      } else if (obj === null) {
        target[0] = nu;
      } else if (typeof obj === 'function') {
        id = Unserialisable.getID();
        unserialisableReferences[id] = obj;
        target[0] = unserialisable;
        target[1] = id;
      } else if (obj instanceof Unserialisable) {
        target[0] = unserialisable;
        target[1] = obj.id;
      } else if (isPrimitive(obj)) {
        target[0] = prim;
        target[1] = obj;
      } else {
        refIdx = seen.lastIndexOf(obj);
        if (refIdx === -1) {
          refIdx = seenIdx;
          seenIdx += 1;
          seen[refIdx] = obj;
          target[1] = refIdx;
          target[2] = {};
          if ('cerealise' in obj && typeof obj.cerealise === 'function') {
            obj = obj.cerealise();
          }
          if (Object.prototype.toString.apply(obj) === '[object Array]') {
            target[0] = array;
          } else {
            target[0] = object;
          }
          worklist = (generateEncodeWork(obj, target[2])).concat(worklist);
        } else {
          target[0] = ref;
          target[1] = refIdx;
        }
      }
    }
    return root;
  };

  generateDecodeWork = function(obj, target) {
    var i, len, name, names, results;
    names = Object.keys(obj);
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      obj[name].unshift(name);
      obj[name].unshift(target);
      results.push(obj[name]);
    }
    return results;
  };

  dejsonify = function(obj) {
    var field, item, root, seen, target, worklist;
    root = {};
    seen = [];
    worklist = [obj];
    obj.unshift('value');
    obj.unshift(root);
    while (worklist.length > 0) {
      item = worklist.shift();
      target = item[0];
      field = item[1];
      switch (item[2]) {
        case undef:
          target[field] = void 0;
          break;
        case nu:
          target[field] = null;
          break;
        case prim:
          target[field] = item[3];
          break;
        case object:
          target[field] = {};
          seen[item[3]] = target[field];
          worklist = (generateDecodeWork(item[4], target[field])).concat(worklist);
          break;
        case array:
          target[field] = [];
          seen[item[3]] = target[field];
          worklist = (generateDecodeWork(item[4], target[field])).concat(worklist);
          break;
        case ref:
          target[field] = seen[item[3]];
          if (target[field] === void 0) {
            throw new Error("Decoding error: referenced object not found");
          }
          break;
        case unserialisable:
          target[field] = unserialisableReferences[item[3]];
          if (target[field] == null) {
            target[field] = new Unserialisable(item[3]);
          }
          break;
        default:
          throw new Error("Decoding error: unhandled object type code " + item[2]);
      }
    }
    return root.value;
  };

  this.Cereal = {
    stringify: function(obj) {
      return JSON.stringify(jsonify(obj));
    },
    parse: function(str) {
      return dejsonify(JSON.parse(str));
    },
    UnserialisableFunction: Unserialisable
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = this.Cereal;
  }

}).call(this);
